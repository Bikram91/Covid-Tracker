{"version":3,"file":"main.js","mappings":"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","sources":["webpack://globalcovidtracker/./src/scripts/navbar.js","webpack://globalcovidtracker/./src/index.js"],"sourcesContent":["const navSlide = () => {\n    const burger = document.querySelector('.burger');\n    const nav = document.querySelector('.nav-links');\n    const navLinks = document.querySelectorAll('.nav-links li');\n    console.log(navLinks[0].innerHTML)\n\n    burger.addEventListener('click', () => {\n        // console.log(nav)\n\n        nav.classList.toggle('nav-active');\n        navLinks.forEach((link, index) => {\n            link.style.animation = `navlLinkFade 1.5s ease forwards ${index / 7 + 5}s`;\n    \n        });\n    });\n}\n\nexport default navSlide","import navSlide from \"./scripts/navbar\";\nimport chart1 from \"./scripts/chartdata\";\n\nnavSlide();\nconst width = 900;\nconst height = 610;\n\nconst svg = d3.select(\"svg\").attr(\"width\", width).attr(\"height\", height);\n\n// Map and projection. Try:  d3.geoAiry() / d3.geoAitoff() / d3.geoArmadillo() / d3.geoAugust() / d3.geoAzimuthalEqualArea() / d3.geoAzimuthalEquidistant() and more\nconst projection = d3\n  .geoMercator()\n  .scale(140)\n  .translate([width / 2, height / 1.5]);\n\n// Load external data and boot\nlet map_data = d3.json(\"./src/scripts/mapdata.JSON\");\n\nconst all_data = async (ele) => {\n  try {\n    let res = await fetch(`./src/scripts/coviddata.JSON`);\n    return await res.json();\n  } catch (err) {\n    console.error(err);\n  }\n};\n\nlet newArr = new Map();\nasync function color() {\n  let result = await all_data();\n  for (let i = 0; i < result.Countries.length; i++) {\n    let total_cases = result.Countries[i].TotalConfirmed;\n    const countryN = result.Countries[i].Country;\n    if (total_cases < 1000) {\n      total_cases = \"#D8E0BB\";\n    } else if (total_cases < 10000 && total_cases > 1000) {\n      total_cases = \"#b6cec7\";\n    } else if (total_cases < 1000000 && total_cases > 10000) {\n      total_cases = \"#86a3c3\";\n    } else if (total_cases < 10000000 && total_cases > 1000000) {\n      total_cases = \"#7268A6\";\n    } else if (total_cases < 100000000 && total_cases > 10000000) {\n      total_cases = \"#6b3074\";\n    }\n    newArr.set(countryN, total_cases);\n  }\n  newArr;\n}\n\ncolor()\n  .then(() => map_data)\n  .then((data) => {\n    map_data.then(function (data) {\n      const countries = svg\n        .append(\"g\")\n        .selectAll(\"path\")\n        .data(data.features)\n        .join(\"path\")\n        .attr(\"class\", \"map\")\n        .attr(\"d\", d3.geoPath().projection(projection))\n        .attr(\"fill\", (d) => newArr.get(d.properties.name))\n        .append(\"country\")\n        .text((d) => d.properties.name);\n    });\n  });\n\nconst get_data = async (ele) => {\n  if (typeof ele === \"undefined\") {\n    return \"\";\n  } else {\n    try {\n      let res = await fetch(\n        `https://api.covid19api.com/country/${ele}?from=2020-03-01T00:00:00Z&to=2022-12-01T00:00:00Z`\n        // `https://api.covid19api.com/total/country/${ele}/status/confirmed?from=2020-03-01T00:00:00Z&to=2022-12-01T00:00:00Z`\n        // `https://api.covid19api.com/live/country/${ele}/status/confirmed/date/2022-09-10T13:13:30Z`\n      );\n      return await res.json();\n    } catch (err) {\n      console.error(err);\n    }\n  }\n};\nlet world_map = document.querySelector(\"#my_dataviz\");\nlet countryName = document.querySelector(\"#country-name\");\nlet countryTotalCases = document.querySelector(\"#country-total-cases\");\nlet countryTotalDeaths = document.querySelector(\"#country-total-deaths\");\nlet array_of_active_cases = [];\nlet array_of_date = [];\nlet array_of_deaths_cases = [];\nlet popChart1;\nlet popChart5;\ncountryName.innerHTML = \"Globally\";\ncountryTotalCases.innerHTML = \"Total Active Cases: 651,595,573\";\ncountryTotalDeaths.innerHTML = \"Total Deaths: 6,652,007\";\n\nconst get_data1 = async (ele) => {\n  if (typeof ele === \"undefined\") {\n    return \"\";\n  } else {\n    try {\n      let res = await fetch(\n        `https://api.covid19api.com/live/country/${ele}/status/confirmed/date/2022-09-10T13:13:30Z`\n      );\n      return await res.json();\n    } catch (err) {\n      console.error(err);\n    }\n  }\n};\n\nworld_map.addEventListener(\"click\", async (e) => {\n  e.preventDefault();\n  array_of_active_cases = [];\n  array_of_deaths_cases = [];\n  array_of_date = [];\n  const titleHtml = e.path[0];\n  let dataDiv = document.querySelector(\"#data\");\n  let deathsDiv = document.querySelector(\"#deaths\");\n  let countrynameDiv = document.querySelector(\".country-name\");\n  if (e.target.tagName === \"path\") {\n    const a = titleHtml.querySelector(\"country\");\n    const name_of_country = a.innerHTML;\n    countryName.innerHTML = name_of_country;\n    const data2 = await get_data1(name_of_country);\n\n    let sum_of_active_cases = 0;\n    let no_of_deaths = 0;\n    for (let i = 0; i < data2.length; i++) {\n      sum_of_active_cases += data2[i].Active;\n      no_of_deaths += data2[i].Deaths;\n    }\n    countryTotalCases.innerHTML = `Total Active Cases: ${sum_of_active_cases}`;\n    countryTotalDeaths.innerHTML = `Total Deaths: ${no_of_deaths}`;\n    const data1 = await get_data(name_of_country);\n    for (let i = 0; i < data1.length - 91; i += 90) {\n      array_of_active_cases.push(data1[i].Confirmed);\n\n      array_of_date.push(data1[i].Date.slice(0, 10));\n      array_of_deaths_cases.push(data1[i].Deaths);\n    }\n\n    function chart2() {\n      const chart1Div = document.getElementById(\"chart1\");\n      if (popChart1) {\n        popChart1.destroy();\n      }\n      const chart1Context = chart1Div.getContext(\"2d\");\n\n      popChart1 = new Chart(chart1Context, {\n        type: \"line\",\n        data: {\n          labels: array_of_date,\n          datasets: [\n            {\n              label: `Total covid cases in ${name_of_country}`,\n              data: array_of_active_cases,\n              backgroundColor: \"rgba(255, 99, 132, 1)\",\n              borderColor: \"rgba(255, 99, 132, 1)\",\n              tension: 0.4,\n            },\n          ],\n        },\n        options: {\n          maintainAspectRatio: false,\n          scales: {\n            y: {\n              beginAtZero: true,\n            },\n          },\n        },\n      });\n    }\n\n    chart2();\n\n    function chart6() {\n      const abcd5 = document.getElementById(\"chart5\");\n      const abcd51 = abcd5.getContext(\"2d\");\n      if (popChart5) {\n        popChart5.destroy();\n      }\n\n      popChart5 = new Chart(abcd51, {\n        type: \"line\",\n        data: {\n          labels: array_of_date,\n          datasets: [\n            {\n              label: `Total deaths cases in ${name_of_country}`,\n              data: array_of_deaths_cases,\n              backgroundColor: \"rgba(255, 99, 132, 1)\",\n              borderColor: \"rgba(255, 99, 132, 1)\",\n              tension: 0.4,\n            },\n          ],\n        },\n        options: {\n          maintainAspectRatio: false,\n          scales: {\n            y: {\n              beginAtZero: true,\n            },\n          },\n        },\n      });\n    }\n\n    chart6();\n  }\n});\n\nconst tooltipDiv = d3\n  .select(\"body\")\n  .append(\"div\")\n  .attr(\"class\", \"tooltip\")\n  .style(\"opacity\", 0)\n  .style(\"width\", \"fit-content\");\n\nworld_map.addEventListener(\"mouseover\", async (e) => {\n  e.preventDefault();\n  const [x, y] = d3.pointer(e);\n  const titleHtml = e.path[0];\n  let countrynameDiv = document.querySelector(\".country-name\");\n  if (e.target.tagName === \"path\") {\n    const a = titleHtml.querySelector(\"country\");\n    const name_of_country = a.innerHTML;\n\n    const data1 = await get_data1(name_of_country);\n\n    let sum_of_active_cases = 0;\n    let no_of_deaths = 0;\n    for (let i = 0; i < data1.length; i++) {\n      sum_of_active_cases += data1[i].Active;\n      no_of_deaths += data1[i].Deaths;\n    }\n    const tooltipData = `<h4>${name_of_country}</h4>  <p>Active cases: ${sum_of_active_cases}</p><p>Total Deaths: ${no_of_deaths}</p>`;\n    tooltipDiv.transition().duration(200).style(\"opacity\", 0.9);\n    tooltipDiv\n      .html(tooltipData)\n      .style(\"left\",  x + 20 + \"px\")\n      .style(\"top\", y+ 100 + \"px\");\n  }\n});\n\nworld_map.addEventListener(\"mouseout\", async (e) => {\n  tooltipDiv.transition().duration(500).style(\"opacity\", 0);\n});\n"],"names":["burger","document","querySelector","nav","navLinks","querySelectorAll","console","log","innerHTML","addEventListener","classList","toggle","forEach","link","index","style","animation","navSlide","svg","d3","select","attr","projection","geoMercator","scale","translate","width","map_data","json","newArr","Map","async","result","res","fetch","err","error","all_data","i","Countries","length","total_cases","TotalConfirmed","countryN","Country","set","color","then","data","append","selectAll","features","join","geoPath","d","get","properties","name","text","popChart1","popChart5","world_map","countryName","countryTotalCases","countryTotalDeaths","array_of_active_cases","array_of_date","array_of_deaths_cases","get_data1","ele","e","preventDefault","titleHtml","path","target","tagName","name_of_country","data2","sum_of_active_cases","no_of_deaths","Active","Deaths","data1","get_data","push","Confirmed","Date","slice","chart2","chart1Div","getElementById","destroy","chart1Context","getContext","Chart","type","labels","datasets","label","backgroundColor","borderColor","tension","options","maintainAspectRatio","scales","y","beginAtZero","chart6","abcd51","tooltipDiv","x","pointer","tooltipData","transition","duration","html"],"sourceRoot":""}